import { ClientTransporterOptions } from '@algolia/client-common';
import { CreateClient } from '@algolia/client-common';
import { RequestOptions } from '@algolia/transporter';
import { SearchOptions } from '@algolia/client-search';
import { Transporter } from '@algolia/transporter';

export declare type ABTest = {
    /**
     * The ab test name.
     */
    readonly name: string;
    /**
     * The ab test list of variants.
     */
    readonly variants: readonly Variant[];
    /**
     * The ab test end date, if any.
     */
    readonly endAt: string;
};

export declare const addABTest: (base: AnalyticsClient) => (abTest: ABTest, requestOptions?: RequestOptions | undefined) => Readonly<Promise<AddABTestResponse>>;

export declare type AddABTestResponse = {
    /**
     * The ab test unique identifier.
     */
    readonly abTestID: number;
    /**
     * The operation task id. May be used to perform a wait task.
     */
    readonly taskID: number;
    /**
     * The index name where the ab test is attached to.
     */
    readonly index: string;
};

export declare type AnalyticsClient = {
    /**
     * The application id.
     */
    readonly appId: string;
    /**
     * The underlying transporter.
     */
    readonly transporter: Transporter;
};

export declare type AnalyticsClientOptions = {
    /**
     * The application id.
     */
    readonly appId: string;
    /**
     * The api key.
     */
    readonly apiKey: string;
    /**
     * The prefered region.
     */
    readonly region?: string;
};

export declare const createAnalyticsClient: CreateClient<AnalyticsClient, AnalyticsClientOptions & ClientTransporterOptions>;

export declare const deleteABTest: (base: AnalyticsClient) => (abTestID: number, requestOptions?: RequestOptions | undefined) => Readonly<Promise<DeleteABTestResponse>>;

export declare type DeleteABTestResponse = {
    /**
     * The ab test unique identifier.
     */
    readonly abTestID: number;
    /**
     * The operation task id. May be used to perform a wait task.
     */
    readonly taskID: number;
    /**
     * The index name where the ab test was attached to.
     */
    readonly index: string;
};

export declare const getABTest: (base: AnalyticsClient) => (abTestID: number, requestOptions?: RequestOptions | undefined) => Readonly<Promise<GetABTestResponse>>;

export declare type GetABTestResponse = {
    /**
     * The ab test name.
     */
    readonly name: string;
    /**
     * The ab test status.
     */
    readonly status: string;
    /**
     * The ab test list of variants.
     */
    readonly variants: readonly VariantResponse[];
    /**
     * The ab test end date, if any.
     */
    readonly endAt: string;
    /**
     * The ab test created date, if any.
     */
    readonly createdAt: string;
    /**
     * The ab test unique identifier.
     */
    readonly abTestID: number;
    /**
     * The ab test significance based on click data. Should be > 0.95 to be considered significant - no matter which variant is winning.
     */
    readonly clickSignificance: number;
    /**
     *
     * The ab test significance based on conversion data. Should be > 0.95 to be considered significant - no matter which variant is winning.
     */
    readonly conversionSignificance: number;
};

export declare const getABTests: (base: AnalyticsClient) => (requestOptions?: (RequestOptions & GetABTestsOptions) | undefined) => Readonly<Promise<GetABTestsResponse>>;

export declare type GetABTestsOptions = {
    /**
     * The number of ab tests to skip from the biginning of the list.
     */
    readonly offset?: number;
    /**
     *  The limit of the number of ab tests returned.
     */
    readonly limit?: number;
};

export declare type GetABTestsResponse = {
    /**
     * The number of ab tests within this response.
     */
    readonly count: number;
    /**
     * The total of ab tests.
     */
    readonly total: number;
    /**
     * The list of ab tests.
     */
    readonly abtests: readonly GetABTestResponse[] | null;
};

export declare const stopABTest: (base: AnalyticsClient) => (abTestID: number, requestOptions?: RequestOptions | undefined) => Readonly<Promise<StopABTestResponse>>;

export declare type StopABTestResponse = {
    /**
     * The ab test unique identifier.
     */
    readonly abTestID: number;
    /**
     * The operation task id. May be used to perform a wait task.
     */
    readonly taskID: number;
    /**
     * The index name where the ab test is attached to.
     */
    readonly index: string;
};

export declare type Variant = {
    /**
     * The index name.
     */
    readonly index: string;
    /**
     * Description of the variant. Useful when seing the results in the dashboard or via the API.
     */
    readonly description?: string;
    /**
     * Percentage of the traffic that should be going to the variant. The sum of the percentage should be equal to 100.
     */
    readonly trafficPercentage: number;
    /**
     * The search parameters.
     *
     * @todo Handle this search options type.
     */
    readonly customSearchParameters?: SearchOptions;
};

export declare type VariantResponse = Variant & {
    /**
     * Average click position for the variant.
     */
    readonly averageClickPostion?: number;
    /**
     * Distinct click count for the variant.
     */
    readonly clickCount?: number;
    /**
     * Click through rate for the variant.
     */
    readonly clickThroughRate?: number;
    /**
     * Click through rate for the variant.
     */
    readonly conversionCount?: number;
    /**
     * Distinct conversion count for the variant.
     */
    readonly conversionRate?: number;
    /**
     * No result count.
     */
    readonly noResultCount?: number;
    /**
     * Search count.
     */
    readonly searchCount?: number;
    /**
     * User count.
     */
    readonly userCount?: number;
    /**
     * The search parameters.
     *
     * @todo Handle this search options type.
     */
    readonly customSearchParameters?: SearchOptions;
};

export { }
